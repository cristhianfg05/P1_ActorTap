public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {



        btSimulate = new javax.swing.JButton();
        Decorator = new javax.swing.JCheckBox();
        Encrypt = new javax.swing.JCheckBox();
        PingPong = new javax.swing.JCheckBox();
        RingActor = new javax.swing.JCheckBox();
        newPredicate = new javax.swing.JTextField();
        btPredicate = new javax.swing.JButton();
        mensajeActores = new javax.swing.JTextField();
        mensajePredicate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 255));

        btSimulate.setText("Simular Actores");
        btSimulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSimulateActionPerformed(evt);
            }
        });

        Decorator.setText("Decorator");

        Encrypt.setText("Encrypt/Decrypt");

        PingPong.setText("PingPong Actor");

        RingActor.setText("Ring Actor");

        newPredicate.setText("Añade palabra para predicado");


        btPredicate.setText("Simular predicate");
        btPredicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPredicateActionPerformed(evt);
            }
        });

        mensajeActores.setText("Mensaje");

        mensajePredicate.setText("Mensaje");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btSimulate)
                                                .addGap(18, 18, 18)
                                                .addComponent(mensajeActores, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(Decorator)
                                                                .addComponent(Encrypt))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(PingPong)
                                                                .addComponent(RingActor))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(btPredicate)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(mensajePredicate, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(newPredicate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btSimulate)
                                        .addComponent(mensajeActores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(PingPong)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(RingActor))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(Decorator)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(Encrypt)))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newPredicate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btPredicate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mensajePredicate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void btSimulateActionPerformed(java.awt.event.ActionEvent evt) {
        if(Decorator.isSelected() && !Encrypt.isSelected() && !PingPong.isSelected() && !RingActor.isSelected()){
            System.out.print("SIMULACIÓN DECORATOR\n");
            target.send(new Message(sender, mensajeActores.getText()));
            boolean not = Observer.notifyMonitor(m,"mensajeEnviado",target);
        }else if(Decorator.isSelected() && Encrypt.isSelected() && !PingPong.isSelected() && !RingActor.isSelected()){
            target1.send(new Message(sender, mensajeActores.getText()));
            boolean not = Observer.notifyMonitor(m,"mensajeEnviado",target1);
        }else if(!Decorator.isSelected() && Encrypt.isSelected() && !PingPong.isSelected() && !RingActor.isSelected()){
            target3.send(new Message(sender, mensajeActores.getText()));
            boolean not = Observer.notifyMonitor(m,"mensajeEnviado",target3);
        }else if(!Decorator.isSelected() && !Encrypt.isSelected() && PingPong.isSelected() && !RingActor.isSelected()){
            ActorProxy ping1 = ActorContext.spawnActor(new PingPongActor("PingPong 1"));
            ActorProxy ping2 = ActorContext.spawnActor(new PingPongActor("PingPong 2"));
            ping2.getPingPongActor().setPareja(ping1.getPingPongActor());
            ping1.getPingPongActor().setPareja(ping2.getPingPongActor());
            ping2.send(new Message(ping1,mensajeActores.getText()));
        }else if(!Decorator.isSelected() && !Encrypt.isSelected() && !PingPong.isSelected() && RingActor.isSelected()){
            ActorProxy ringArray[] = new ActorProxy[10];
            for (int i = 0; i < 10; i++){
                String name = "Ring "+i;
                ringArray[i] = ActorContext.spawnActor(new RingActor(name));
            }

            for (int i = 1; i < 10; i++){
                ringArray[i-1].getRingActor().linkActor(ringArray[i].getRingActor());
            }
            ringArray[9].getRingActor().linkActor(ringArray[0].getRingActor());

            ringArray[0].send(new Message(ringArray[9], mensajeActores.getText()));
        }else System.out.println("Simulación no disponible");
    }


    private void btPredicateActionPerformed(java.awt.event.ActionEvent evt) {

        if(!newPredicate.getText().isEmpty()){
            System.out.println(newPredicate.getText());
            lambaDecorator.send(new AddClosureMessage(x -> x.getMsg().equals(newPredicate.getText())));
        }else{
            System.out.println("Entré");
            lambaDecorator.send(new Message(target2, mensajePredicate.getText()));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JCheckBox Decorator;
    private javax.swing.JCheckBox Encrypt;
    private javax.swing.JCheckBox PingPong;
    private javax.swing.JCheckBox RingActor;
    private javax.swing.JButton btPredicate;
    private javax.swing.JButton btSimulate;
    private javax.swing.JTextField mensajeActores;
    private javax.swing.JTextField mensajePredicate;
    private javax.swing.JTextField newPredicate;
    // End of variables declaration

    ActorContext ActorED = ActorContext.getInstance();
    Observer observer = Observer.getInstance();
    MonitorService m = new MonitorService();
    private ActorProxy sender = ActorContext.spawnActor(new FirewallDecorator(new EncryptionDecorator(new Actor("a"))));
    private ActorProxy target = ActorContext.spawnActor(new FirewallDecorator(new Actor("b"))); // new EncryptionDecorator()
    private ActorProxy target3 = ActorContext.spawnActor(new EncryptionDecorator(new Actor("f")));
    private ActorProxy target1 = ActorContext.spawnActor(new EncryptionDecorator(new FirewallDecorator(new Actor("c"))));
    private ActorProxy target2 = ActorContext.spawnActor(new FirewallDecorator(new Actor("d")));
    private ProxyClient proxy = ActorContext.spawnProxy(new FirewallDecorator(new Actor("e")));
    private ActorProxy lambaDecorator = ActorContext.spawnActor(new LambdaFirewallDecorator(new Actor("f"), x -> x.getMsg() != null));
    boolean a = Observer.Subscribe(m, target);
    boolean a1 = Observer.Subscribe(m, target1);
    boolean a2 = Observer.Subscribe(m, target3);
}
